{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport incrmmean from '@stdlib/stats-incr-mmean';\nimport signum from '@stdlib/math-base-special-signum';\nimport kroneckerDelta from '@stdlib/math-base-special-kronecker-delta';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean directional accuracy.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmda( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns 0.5\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.33\n*\n* m = accumulator( 4.0, 5.0 );\n* // returns ~0.33\n*\n* m = accumulator();\n* // returns ~0.33\n*/\nfunction incrmmda( W ) {\n\tvar mean;\n\tvar FLG;\n\tvar f0;\n\tvar a0;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '1IN8B,Hs', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean directional accuracy. If not provided input values, the accumulator function returns the current mean directional.\n\t*\n\t* @private\n\t* @param {number} [f] - forecast value\n\t* @param {number} [a] - actual value\n\t* @returns {(number|null)} mean directional accuracy or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tvar sf;\n\t\tvar sa;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tif ( FLG === void 0 ) {\n\t\t\tFLG = true;\n\t\t\tf0 = f;\n\t\t\ta0 = a;\n\t\t}\n\t\tsf = signum( f-f0 );\n\t\tsa = signum( a-a0 );\n\t\tf0 = f;\n\t\ta0 = a;\n\t\treturn mean( kroneckerDelta( sf, sa ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmmda;\n"],"names":["incrmmda","W","mean","FLG","f0","a0","isPositiveInteger","TypeError","format","incrmmean","f","a","sf","sa","arguments","length","signum","kroneckerDelta"],"mappings":";;wfA2DA,SAASA,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAmBL,GACxB,MAAM,IAAIM,UAAWC,EAAQ,WAAYP,IAG1C,OADAC,EAAOO,EAAWR,GAWlB,SAAsBS,EAAGC,GACxB,IAAIC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAOb,SAEK,IAARC,IACJA,GAAM,EACNC,EAAKM,EACLL,EAAKM,GAMN,OAJAC,EAAKI,EAAQN,EAAEN,GACfS,EAAKG,EAAQL,EAAEN,GACfD,EAAKM,EACLL,EAAKM,EACET,EAAMe,EAAgBL,EAAIC,GACjC,CACF"}
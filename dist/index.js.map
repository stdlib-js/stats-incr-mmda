{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar incrmmean = require( '@stdlib/stats-incr-mmean' );\nvar signum = require( '@stdlib/math-base-special-signum' );\nvar kroneckerDelta = require( '@stdlib/math-base-special-kronecker-delta' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean directional accuracy.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmda( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns 0.5\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.33\n*\n* m = accumulator( 4.0, 5.0 );\n* // returns ~0.33\n*\n* m = accumulator();\n* // returns ~0.33\n*/\nfunction incrmmda( W ) {\n\tvar mean;\n\tvar FLG;\n\tvar f0;\n\tvar a0;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean directional accuracy. If not provided input values, the accumulator function returns the current mean directional.\n\t*\n\t* @private\n\t* @param {number} [f] - forecast value\n\t* @param {number} [a] - actual value\n\t* @returns {(number|null)} mean directional accuracy or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tvar sf;\n\t\tvar sa;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tif ( FLG === void 0 ) {\n\t\t\tFLG = true;\n\t\t\tf0 = f;\n\t\t\ta0 = a;\n\t\t}\n\t\tsf = signum( f-f0 );\n\t\tsa = signum( a-a0 );\n\t\tf0 = f;\n\t\ta0 = a;\n\t\treturn mean( kroneckerDelta( sf, sa ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmda;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean directional accuracy incrementally.\n*\n* @module @stdlib/stats-incr-mmda\n*\n* @example\n* var incrmmda = require( '@stdlib/stats-incr-mmda' );\n*\n* var accumulator = incrmmda( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns 0.5\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.33\n*\n* m = accumulator( 4.0, 5.0 );\n* // returns ~0.33\n*\n* m = accumulator();\n* // returns ~0.33\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,oCAAqC,EAAE,YACpEC,EAAY,QAAS,0BAA2B,EAChDC,EAAS,QAAS,kCAAmC,EACrDC,EAAiB,QAAS,2CAA4C,EACtEC,EAAS,QAAS,uBAAwB,EAiC9C,SAASC,EAAUC,EAAI,CACtB,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAK,CAACV,EAAmBM,CAAE,EAC1B,MAAM,IAAI,UAAWF,EAAQ,kEAAmEE,CAAE,CAAE,EAErG,OAAAC,EAAON,EAAWK,CAAE,EACbK,EAUP,SAASA,EAAaC,EAAGC,EAAI,CAC5B,IAAIC,EACAC,EACJ,OAAK,UAAU,SAAW,EAClBR,EAAK,GAERC,IAAQ,SACZA,EAAM,GACNC,EAAKG,EACLF,EAAKG,GAENC,EAAKZ,EAAQU,EAAEH,CAAG,EAClBM,EAAKb,EAAQW,EAAEH,CAAG,EAClBD,EAAKG,EACLF,EAAKG,EACEN,EAAMJ,EAAgBW,EAAIC,CAAG,CAAE,EACvC,CACD,CAKAhB,EAAO,QAAUM,ICjDjB,IAAIW,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isPositiveInteger", "incrmmean", "signum", "kroneckerDelta", "format", "incrmmda", "W", "mean", "FLG", "f0", "a0", "accumulator", "f", "a", "sf", "sa", "main"]
}
